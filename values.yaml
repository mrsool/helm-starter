# Values for <CHARTNAME> should update image version
image:
  repository: <CHARTNAME>
  tag: latest
  pullPolicy: Always

# nameOverride: ""
# fullnameOverride: ""

# Add labels that will be added to the resources
extraLabels: {}
    # pr-branch: {{ .Values.prBranch }}
    # suspender-env: "{{ .Values.suspenderEnv }}"
    # dont_suspend: "{{ .Values.dont_suspend }}"
    # pr-number: "pr-{{ .Values.prNumber }}"
    # gh_num_website: "{{ .Values.run_number }}"
    # tags.datadoghq.com/env: preview
    # tags.datadoghq.com/service: <CHARTNAME>
    # tags.datadoghq.com/version: "{{ .Values.imageTag }}"

# Configuration for servers deployment to create one or more deployment.
Servers:

# the deployment name with the all K8s resources.
  server:
    # Number of replicas (Required)
    replicaCount: 1

    # Server container port (Required)
    httpPort: 80

    # How kubernetes determines when the server is ready and if it's still alive (Suggested)
    health:
      readinessProbe:
        httpGet:
          path: /health/readiness
          port: 8080
        initialDelaySeconds: 60
        periodSeconds: 60
      livenessProbe:
        httpGet:
          path: /health/liveness
          port: 8080
        initialDelaySeconds: 60
        periodSeconds: 60
    # Determing processes securityContext.

    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#podsecuritycontext-v1-core ( podSecurityContext [ Optioanl ])
    podSecurityContext:
      fsGroup: 2000

    # Requested resources and limits for the server (Suggested)
    resources: {}
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
      # limits:
      #   cpu: 100m
      #   memory: 128Mi

    # Pass custom command. Defaults to docker image ENTRYPOINT (Optional)
    command: []

    # Pass custom args. Defaults to docker image CMD (Optional)
    args: []

    # Constraints how pods should be spread across nodes
    # valid values:
    # - ""     (no constraints)
    # - "soft" (tries to spread the pods if possible)
    # - "hard" (forces the pods to be spread)
    antiAffinity: ""

    # The deployment strategy to use to replace existing pods with new ones. (Optional)
    updateStrategy: {}
      # rollingUpdate:
      #   maxUnavailable: 1
      # type: RollingUpdate

    # Annotations to add to server pods. (Optional)
    podAnnotations: {}
      # fluentbit.io/parser: nginx-ingress

    # Labels to add to server pods. (Optional)
    podLabels: {}
      # stack: node

    # Which nodes should the server run on. (Suggested)
    nodeSelector: {}
      # environment: dev

    # https://kubernetes.io/docs/concepts/configuration/taint-and-toleration. (Optional)
    tolerations: []
      # - key: "instancegroup"
      #   operation: "Equal"
      #   value: "dev"

    # Server environment variables. (Optional)
    # server also inherits variables from envVarSource, secretEnv and existSecretNames but env has higher priority.
    # values can contain go templates
    env: {}
      # KEY: val
      # URL: value-{{ .Release.Prefix }}

    # Server environment variables from a source/reference for the value. (Optional)
    # Sources Like:
      # fieldRef: Selects a field of the pod
        # metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        # Examaples: https://raw.githubusercontent.com/kubernetes/website/main/content/en/examples/pods/inject/dapi-envars-pod.yaml
      # resourceFieldRef: Selects a resource of the container
      # Note: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
      # Examples: https://kubernetes.io/docs/tasks/inject-data-application/_print/#use-container-fields-as-values-for-environment-variables
      # configMapKeyRef: Selects a key of a ConfigMap.
      # secretKeyRef: Selects a key of a secret in the pod's namespaceource for the value of an Env

    envVarSource: {}
      # KEY: "{ <SOURCE>: { <OBJECTS....> } }"
      # POD_IP: "{ fieldRef: { fieldPath: status.podIP } }"

    # to use existing secret in deployment file
    existSecretNames: []
      # the names of existing secrets names
      #  - existsecret
      #  - secondsecret
    
    ## Specifies the path to the ProxySQL configuration file stored in 1Password (The path follows the structure of a vaults directory). 
    ## This path contains the auth auth environment variables.
    # Used by existSecretNames
    environmentVariablesOnePasswordPath: ""
    #"vaults/xx-staging/items/xx-environment-variables"
  
    # add containerVolumeMounts to container
    containerVolumeMounts: []
      # - name: secret
      #   mountPath: "/etc/secret"
      #   readOnly: true

    # add the volumes to pod
    volumes: []
      # - name: secret
      #   secret:
      #     secretName: mysecret
    
    # To Create ServiceAccount
    serviceAccount: false

    # To Create ServiceMonitor
    serviceMonitor:
      enabled: false
      namespace: monitoring

    # Service configuration
    service:
      # Service type (ClusterIP, NodePort, LoadBalancer)
      type: ClusterIP

      # Annotations to add to service. (Optional)
      annotations: {}
        # external-dns.alpha.kubernetes.io/hostname: service.staging.[YOUR-DOMAIN].org

      # Service ports
      ports:
        http:
          # Exposed service port
          port: 80
          # Container port
          targetPort: http

    # Ingress configuration
    ingress:
      enabled: false
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      path: /
      hosts:
        # [{{subdomain.value}}.]{{zone}}
        - zone: staging.[YOUR-DOMAIN].org
          subdomain:
            enabled: false
            # value defaults to fullname if not specified
            value: ""
      ## If provided in format of "user:password" will add basic auth
      # basicAuth: "username:password"
      tls: {}
      #  secretName: [YOUR-DOMAIN/ANYName]-api-tls-env

    ## Application controller Pod Disruption Budget
    ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    pdb:
      # -- Deploy a [PodDisruptionBudget] for the server.
      enabled: false
      # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
      # @default -- `""` (defaults to 0 if not specified)
      minAvailable: ""
      # -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).
      ## Has higher precedence over `controller.pdb.minAvailable`
      maxUnavailable: ""

    # Configuration for HorizontalPodAutoscaler
    ## Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/
    hpa:
      # add if true hpa.yaml is applied
      enabled: false

      # minimum number of replicas created
      minpods: 2

      # maximum number of replicas created
      maxpods: 5

      # Scaling policies
      scaleDown:
        # restrict the flapping of replicas count when the metrics used for scaling keep fluctuating
        stabilizationWindowSeconds: {}
        # the Scaling down policy Configurations:
        type: {}
        periodSeconds: {}
        value: {}

      scaleUp:
        # restrict the flapping of replicas count when the metrics used for scaling keep fluctuating
        stabilizationWindowSeconds: {}
        # the Scaling down policy Configurations:
        type: {}
        periodSeconds: {}
        value: {}

      # Memory metric Configurations if value given it creates a memory metric and start scaling depending on memoryAverageUtilization
      memoryAverageUtilization: {}

      # CPU metric Configurations if value given it creates a cpu metric and start scaling depending on cpuAverageUtilization
      cpuAverageUtilization: 50


    # add your custom metrics confgurations here
      customMetrics: {}

    # add your custom behavior confgurations here
      customBehavior: {}
